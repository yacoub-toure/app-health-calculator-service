name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  # Assure-toi que ces secrets existent dans les paramètres de ton repo GitHub
  AZURE_WEBAPP_NAME: ${{ secrets.AZURE_WEBAPP_NAME }}   # Nom de ton App Service
  ACR_LOGIN_SERVER: ${{ secrets.ACR_LOGIN_SERVER }}    # Serveur de connexion de ton ACR (ex: monregistre.azurecr.io)
  IMAGE_NAME: health-calculator-service              # Nom de l'image Docker dans ACR

jobs:
  build-test-deploy: # Renommé pour plus de clarté
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4 # Utilise une version plus récente

    - name: Set up Python 3.12
      uses: actions/setup-python@v4 # Utilise une version plus récente
      with:
        python-version: '3.12' # Spécifie Python 3.12 (prendra la dernière patch disponible, ex: 3.12.3)

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        # Assure-toi que pytest est dans requirements.txt si tu ne l'as pas déjà fait
        # pip install pytest si nécessaire pour l'étape suivante

    - name: Run tests with pytest
      run: |
        pytest test.py -v

    # --- Construction et Push Docker (uniquement sur push vers main) ---
    - name: Build and tag Docker image
      # Cette étape construit l'image, même pour les PRs, pour vérifier que la construction fonctionne
      # Mais elle ne poussera que sur un push vers main (voir étapes suivantes)
      run: |
        docker build . --file Dockerfile \
          --tag ${{ env.ACR_LOGIN_SERVER }}/${{ env.IMAGE_NAME }}:${{ github.sha }} \
          --tag ${{ env.ACR_LOGIN_SERVER }}/${{ env.IMAGE_NAME }}:latest
      # Note: Assure-toi que ton Dockerfile utilise aussi une base Python 3.12 !

    - name: Login to Azure
      if: github.event_name == 'push' && github.ref == 'refs/heads/main'
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }} # Utilise un Service Principal

    - name: Login to Azure Container Registry (ACR)
      if: github.event_name == 'push' && github.ref == 'refs/heads/main'
      run: |
        az acr login --name ${{ env.ACR_LOGIN_SERVER }}

    - name: Push Docker image to ACR
      if: github.event_name == 'push' && github.ref == 'refs/heads/main'
      run: |
        docker push ${{ env.ACR_LOGIN_SERVER }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
        docker push ${{ env.ACR_LOGIN_SERVER }}/${{ env.IMAGE_NAME }}:latest

    # --- Déploiement sur Azure App Service (uniquement sur push vers main) ---
    - name: Deploy to Azure Web App for Containers
      if: github.event_name == 'push' && github.ref == 'refs/heads/main'
      uses: azure/webapps-deploy@v2
      with:
        app-name: ${{ env.AZURE_WEBAPP_NAME }}
        images: '${{ env.ACR_LOGIN_SERVER }}/${{ env.IMAGE_NAME }}:${{ github.sha }}' # Déploie l'image spécifique poussée

    # --- Déconnexion (bonne pratique) ---
    - name: Logout from Azure
      if: always() && github.event_name == 'push' && github.ref == 'refs/heads/main' # 'always()' assure l'exécution même si une étape échoue
      run: |
        az logout
        az cache purge
        az account clear